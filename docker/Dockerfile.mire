# Canvas builder stage
FROM node:20.19.1-alpine@sha256:a434dd06b5ef8e032898f6f66ca676807a35ba893e8dc9adce4bccd067bd2da3 AS canvas

# Install build dependencies for node-canvas
RUN apk add --no-cache build-base cairo-dev pango-dev jpeg-dev giflib-dev librsvg-dev

# Set working directory
WORKDIR /canvas

# Copy package.json and package-lock.json
COPY package*.json ./

# Install canvas and its dependencies
RUN npm install canvas@next


# Main build stage
FROM node:20.19.1-alpine@sha256:a434dd06b5ef8e032898f6f66ca676807a35ba893e8dc9adce4bccd067bd2da3 AS builder

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm un canvas
RUN npm ci

# Copy the rest of the application code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:20.19.1-alpine@sha256:a434dd06b5ef8e032898f6f66ca676807a35ba893e8dc9adce4bccd067bd2da3 AS production

# Set working directory
WORKDIR /app

# Install runtime dependencies for node-canvas
RUN apk add --no-cache cairo pango jpeg giflib librsvg

# Copy package.json and package-lock.json
COPY package*.json ./

# Install production dependencies
RUN npm un canvas && rm -rf node_modules && npm cache clean --force
RUN npm ci --only=production && npm cache clean --force

# Copy the built canvas module from canvas
COPY --from=canvas /canvas/node_modules/canvas ./node_modules/canvas

# Copy built application from builder stage
COPY --from=builder /app/build ./build

# Set NODE_ENV
ENV NODE_ENV=production
ENV PORT=3000

# Expose the port your app runs on
EXPOSE 3000

# Define the command to run your app
CMD ["node", "build/server.js"]
